# this is meant to be ran locally (delegated), it will generate keys. These should be added to a secret storage, some of them should not be ran frequently
- copy:
    mode: 0644
    dest: "{{ user }}-gpg-key-answers"
    content: |
      %no-protection
      %no-ask-passphrase
      Key-Type: 1
      Key-Type: RSA
      Key-Length: 4096
      Subkey-Type: RSA
      Subkey-Type: 1
      Subkey-Length: 2048
      Subkey-Usage: SC
      Subkey-Length: 2048
      Subkey-Usage: A
      Subkey-Length: 2048
      Subkey-Usage: E
      Revoker: {{ ca.gpg }}
      Name-Real: {{ user.full_name }}
      Name-Email: {{ user.email }}
      Name-Comment: {{ user.comment }}
      Expire-Date: {{ user.expire }}
- name: 'output for generated keys and more'
  file:
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    path: "{{ user.name }}"
    mode: 0700
    state: directory

- name: 'generate user gpg key'
  command: "gpg2 --batch --full-gen-key {{ user.name }}-gpg-key-answers"
- name: 'generate user gpg revoke key, we hold onto this. If user is compormised or leaves, we revoke the key'
  command: "gpg2 --output {{ user.name}}-revoke.asc --gen-revoke "

- name: 'generate user ssh key: TBS'
  command: "ssh-keygen -t ed25519 -C generated-{{ user.name }}-{{ user.email }}-{{ user.comment }} -f user-{{ user.name }}-ed25519"
  when: "{{ user.ssh.provided_pub }}"
- block:
  - name: 'generate the user ssh ca'
    command: "ssh-keygen -t ed25519 -C SSH_user_CA-ed25519 -f user-ed25519-ca"
  - name: 'read user ssh ca'
    command: "cat user-ed25519-ca"
    register: user_ca_private
  - name: 'read user ssh ca'
    command: "cat user-ed25519-ca.pub"
    register: user_ca_public
  when: user_ca_private is not defined

- name: 'sign user key'
  command: "ssh-keygen -s user_ed25519_ssh_ca -I superuser_id -n {{ user.name }} -z 1 -V +52w user-{{ user.name }}-ed25519.pub"
- name: 'read signed key'
  command: "cat user-{{ user.name }}-ed25519.pub"
  register: user
- name: "local actions, once per user or upon refresh/rotate keys"
  block:
  - name: 'get hex for 2fa'
    shell: "openssl rand -hex 8 | base32"
    register: 2fa_code
  - name: 'create qrcode for user html'
    shell: "qrencode -o - 'otpauth://totp/user@machine?{{ 2fa_code }}' | base64"
    register: 2fa_qr
# the ssh CA should be stored securely, the content here is for signing host certificates (and generates the ssh ca)
#https://blog.habets.se/2011/07/OpenSSH-certificates.html
- block:
  - name: 'generate the host ssh ca'
    command: ssh-keygen -t ed25519 -C SSH_CA-ed25519 -f ed25519-host-ca
  - name: 'read host SSH CA public key'
    command: cat ed25519-host-ssh-ca.pub
  - name: 'read host SSH CA private key'
    command: cat ed25519-host-ssh-ca
    register: ssh_host_ca_private
  when: ssh_host_ca_private

- name: "generate host key (to be signed later), No password, for group: {{ group }} at domain: {{ domain }}"
  command: "ssh-keygen -N '' -t ed25519 -f ed25519-host-{{ group }}.{{ domain }}"
- name: 'Sign host key, generate certificate Identity, signing key create Host cert, priNciple group and domain, Validity 52weeks, previous key file to sign'
  command: "ssh-keygen -s ed25519-host-ca -I autoscaled_host_id -h -n {{ group }}.{{ domain }} -V +52w ed25519-host-{{ group }}.{{ domain }}"


# moved from local_ssh_ca, the ssh CA should be stored securely, the content here is for signing host certificates (and generates the ssh ca)
#https://blog.habets.se/2011/07/OpenSSH-certificates.html
- block:
  - name: 'generate the host ssh ca'
    command: ssh-keygen -t ed25519 -C SSH_CA-ed25519 -f ed25519-host-ca
  - name: 'read host SSH CA public key'
    command: cat ed25519-host-ssh-ca.pub
  - name: 'read host SSH CA private key'
    command: cat ed25519-host-ssh-ca
    register: ssh_host_ca_private
  when: ssh_host_ca_private

- name: "generate host key (to be signed later), No password, for group: {{ group }} at domain: {{ domain }}"
  command: "ssh-keygen -N '' -t ed25519 -f ed25519-host-{{ group }}.{{ domain }}"
- name: 'Sign host key, generate certificate Identity, signing key create Host cert, priNciple group and domain, Validity 52weeks, previous key file to sign'
  command: "ssh-keygen -s ed25519-host-ca -I autoscaled_host_id -h -n {{ group }}.{{ domain }} -V +52w ed25519-host-{{ group }}.{{ domain }}"
# TODO, this will help allow adding local users on a central server, this might only be needed when operators don't have Individual Linux machines to work on
- name: skel create ssh config for our domain customizations, for new accounts
  copy:
    owner: root
    group: root
    mode: 0600
    dest: "/etc/skel/.ssh/config.d/{{ domain }}"
    content: |
      ControlMaster auto
      ControlPath ~/.ssh/sockets/C_%h 
      ControlPersist 6h
      Compression yes
      ForwardAgent yes
      RemoteForward .gnupg/S.gpg-agent.extra .gnupg/S.gpg-agent.forward
      Include ~/.ssh/config.d/*conf
- name: skel create ssh config, for new accounts
  copy:
    owner: root
    group: root
    mode: 0600
    dest: /etc/skel/.ssh/config
    content: |
      Host *.{{ domain }}
      HostKeyAlgorithms ssh-dss-cert-v01@openssh.com,ssh-dss
      Host bastion-jump
      Port 22223
      DynamicForward localhost:9119
      LocalForward 9117 localhost:9117
      ProxyCommand ssh {{ bastion-jump-host }} -W %h:%p -q
- name: skel create .vimrc, for new accounts
  copy:
    owner: root
    group: root
    mode: 0644
    dest: /etc/skel/.ssh/known_hosts
    content: |
      @cert-authority {{ ssh_host_ca_pub }}

- name: 'home files'
  copy:
    owner: "{{ item.0 }}"
    content: "{{ item.1.files }}"
  loop: "{{ files | subelements('files') }}"
- name: 'create 2fa file'
  template:
    path: /etc/users-hotp
    owner: 'root'
    group: 'root'
  loop: "{{ users }}"
