---
##### END OS Packaging and Repositories #####
- name: upgrade all packages, asynchronously
  package:
    name: '*'
    state: latest
  async: 600
  register: package_upgrade
  poll: 0
  when: pkg_upgrade_all

##### BEGIN Network configuration: Networkd #####
- name: networkd work
  block:
    - name: create networkd directory
      file:
        state: directory
        path: /etc/systemd/network
        mode: 0755
        setype: etc_t
        owner: root
        group: root
      when: addresses is defined and addresses |length >= 1
      register: networkd

    - name: 'systemd-networkd allows for many more features and control than regular init style network scripts'
      debug:
        msg: "/etc/systemd/network/interface-{{ iface.key }}.network"
      loop: "{{ addresses |dict2items }}"
      loop_control:
        loop_var: iface

    - name: 'systemd-networkd allows for many more features and control than regular init style network scripts'
      template:
        src: networkd-primary-interface.network
        dest: "/etc/systemd/network/interface-{{ iface.key }}.network"
        owner: root
        group: root
        mode: '0644'
        setype: etc_t
      when: networkd is success
      register: primary_networkd
      loop: "{{ addresses |dict2items }}"
      loop_control:
        loop_var: iface

    - name: enable networkd manual handler
      systemd:
        name: systemd-networkd
        state: restarted
        enabled: yes
      when: primary_networkd.changed

    - name: enable resolved
      systemd:
        name: systemd-resolved
        state: restarted
        enabled: yes
      register: resolved_unit
      when: resolvers is defined

    - name: Set resolv.conf when using resolved
      file:
        src: /run/systemd/resolve/stub-resolv.conf
        force: yes
        dest: /etc/resolv.conf
        state: link
      when: resolved_unit is success
  when: '"systemd-networkd" in common_packages.install'

- name: static hosts entries
  block:
    - name: hosts, for localnet domain
      template:
        src: etc_hosts.j2
        dest: /etc/hosts
        owner: root
        group: root
        mode: '0644'
        setype: etc_t #new: net_conf_t
      when: net_hosts | selectattr('tags','match','include')

    - name: 'ethers, reduces arp traffic. This will only be added for hosts that have hwaddr in their dict'
      template:
        src: ethers.j2
        dest: /etc/ethers
        owner: root
        group: root
        setype: etc_t #new: net_conf_t
        mode: '0644'
      when: net_hosts | selectattr('hwaddr','defined')
      register: arp_file

    - name: copy ethers service, not present on ubuntu
      template:
        src: arp-ethers.service
        dest: /etc/systemd/system/
        owner: root
        group: root
        mode: '0644'
      when: ansible_facts['os_family'] == 'Debian' and arp_file.changed or ( "net-tools" not in common_packages.install and "net-tools" not in dnf_packages.install )

    - name: ethers service, seed arp tables from file
      systemd:
        name: arp-ethers.service
        enabled: yes
        no_block: yes
        state: restarted
      when: arp_file.changed

    - name: set hostname from net hosts based on MAC address
      hostname:
        name: "{{ net_hosts |selectattr('interfaces',) }}.{{ domain |default('unset') }}"
      register: net_hosts_hostname
      when: net_hosts | selectattr('hwaddr','match',ansible_facts['default_ipv4'].macaddress)

    - name: set preserve on hostname because we just set it above
      set_fact:
        hostname: '_preserve_'
      when: net_hosts_hostname.changed
  when: net_hosts is defined

- name: Set nameserver
  debug:
    msg: "place holder for modifying dns in /etc/resolv.conf"
##### END Network configuration: Networkd #####
##### BEGIN Basic system tasks #####
- name: set hostname
  hostname:
    name: "{{ hostname | default(ansible_facts['machine_id']) }}.{{ domain |default(omit) }}"
  when: hostname is not defined or hostname != "_preserve_"

- name: Set timezone to variable 'timezone'
  timezone:
    name: "{{ timezone | default('UTC') }}"
  when: timezone != "_preserve_"

##### END Basic system tasks #####
##### BEGIN Human User configurations #####
# This is just a time saver, and since these empty files and directories don't consume much space, why not
- name: skel create .ssh, for new accounts
  file:
    owner: root
    group: root
    path: /etc/skel/.ssh/config.d
    setype: etc_t
    mode: 0700
    state: directory

- name: skel create .ssh, for new accounts
  file:
    owner: root
    group: root
    path: /etc/skel/.ssh
    setype: etc_t
    mode: 0700
    state: directory

- name: skel create authorized keys file, for new accounts
  file:
    owner: root
    group: root
    path: /etc/skel/.ssh/authorized_keys
    mode: 0600
    state: touch

- name: skel create basic .vimrc, for new accounts
  copy:
    owner: root
    group: root
    mode: 0644
    dest: /etc/skel/.vimrc
    setype: etc_t
    content: |
      set ruler
      set number
      set nocompatible
      syntax enable
      colorscheme desert

- name: banner
  copy:
    owner: root
    group: root
    mode: 0644
    dest: /etc/banner
    setype: etc_t
    content: |
      {{ pre_remote_banner | default('welcome') }}

- name: display message upon successful login, replaces much of ubuntu landscape text
  copy:
    owner: root
    group: root
    mode: 0644
    dest: /etc/motd
    setype: etc_t
    content: |
      {{ post_login_banner | default(' ip: \4  automation_version: ' + devops_ver ) }}

- name: issue banner displayed on both remote and local pre login
  copy:
    owner: root
    group: root
    mode: 0644
    dest: /etc/issue
    setype: etc_t
    content: |
      {{ pre_login_local_banner | default(' ip: \4  automation_version: ' + devops_ver ) }}

- name: change default history, preference towards preserving history
  lineinfile:
    path: /etc/profile
    regexp: '^HISTSIZE='
    line: HISTSIZE=9000
    owner: root
    group: root
    mode: 0644

- name: change global bashrc
  lineinfile:
    path: "/etc/{{ system_bashrc }}"
    insertafter: '^SHELL='
    line: 'HISTTIMEFORMAT="%Y-%m-%d %H:%M:%S  "'
    owner: root
    group: root
    mode: 0644

- name: import initial user tasks
  import_tasks: users_and_groups.yml

##### END Human User configurations #####
##### BEGIN systemd #####
- name: journald config
  template:
    src: journald.conf
    dest: /etc/systemd/
    owner: root
    group: root
    mode: '0644'
    setype: etc_t

- name: logind config
  template:
    src: logind.conf
    dest: /etc/systemd/
    owner: root
    group: root
    mode: '0644'
    setype: etc_t

- name: sleep config
  template:
    src: sleep.conf
    dest: /etc/systemd/
    owner: root
    group: root
    mode: '0644'
    setype: etc_t

- name: pstore config
  template:
    src: pstore.conf
    dest: /etc/systemd/
    owner: root
    group: root
    mode: '0644'
    setype: etc_t

- name: resolved config
  template:
    src: resolved.conf
    dest: /etc/systemd/
    owner: root
    group: root
    mode: '0644'
    setype: etc_t

- name: systemd config
  template:
    src: system.conf
    dest: /etc/systemd/
    owner: root
    group: root
    mode: '0644'
    setype: etc_t
##### END systemd #####
##### BEGIN other utilities #####
- name: disable cloud init for now
  file:
    owner: root
    group: root
    path: /etc/cloud/cloud-init.disabled
    mode: 0755
    setype: etc_t
    state: touch
  when: disable_cloud_init is defined

- name: create a custom tuned profile
  file:
    owner: root
    group: root
    path: "/etc/tuned/{{ tuned_profile |default('custom') }}"
    mode: 0755
    setype: tuned_etc_t
    state: directory
  when: tuned_profile is defined

- name: create a custom sysctl changes
  sysctl:
    sysctl_file: ansible_linux_common
    name: "{{ item.key }}"
    value: "{{ item.value }}"
  loop: "{{ performance_sysctl |combine(security_sysctl) | dict2items }}"
  tags:
    - notest

- name: check if EFI
  stat:
    path: /sys/firmware/efi
  register: efi

- name: changes needed for serial output
  block:
    - name: change grub default CMDLINE
      lineinfile:
        path: /etc/default/grub
        create: yes
        regexp: '^GRUB_SERIAL_COMMAND='
        line: 'GRUB_SERIAL_COMMAND="serial --unit=0 --speed=115200 --parity=no --word=8  --stop=1"'
        owner: root
        group: root
        mode: 0644
      notify: handle_grub

    - name: change grub default CMDLINE
      lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_TERMINAL_INPUT='
        line: GRUB_TERMINAL_INPUT='console serial_ttyS0'
        owner: root
        group: root
        mode: 0644
      notify: handle_grub
  when: kernel_boot_cmdline | regex_search('ttyS0')

- name: allow serial and other kernel cmd line changes
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX="(.*)"$'
    backrefs: yes
    backup: true
    line: "GRUB_CMDLINE_LINUX=\\\"\\g<1> {{ kernel_boot_cmdline | default('') }} \\\""
    notify: handle_grub
  tags:
    - notest

##### END other utilities #####
##### BEGIN SSH config #####
- name: openSSH CA
  block:
    - name: public SSH CA host certiticate
      copy:
        dest: /etc/ssh/ssh_host_cert.key
        mode: 0400
        owner: root
        group: root
        setype: sshd_key_t
        content: |
          {{ ssh_host_cert_key }}
      notify: handle_sshd
      when: ssh_host_cert_key is defined

    - name: public SSH CA host certiticate
      copy:
        dest: /etc/ssh/ssh_host_cert.pub
        mode: 0400
        owner: root
        group: root
        setype: sshd_key_t
        content: "{{ ssh_host_cert_pub }}"
      register: ssh_host_ca
      notify: handle_sshd
      when: ssh_host_cert_pub is defined

    - name: SSH CA principles (-n)
      file:
        path: /etc/ssh/auth_principals
        mode: 0500
        owner: root
        group: root
        state: directory
        setype: sshd_key_t
      notify: handle_sshd
      when: sshd_principles is defined

    - name: SSH CA revoked keys
      copy:
        dest: /etc/ssh/revoked
        mode: 0440
        owner: root
        group: root
        setype: sshd_key_t
        content: "{{ revoked_keys | default('') }}"
      notify: handle_sshd

    - name: public SSH User CA
      copy:
        dest: /etc/ssh/ssh_ca_user.pub
        mode: 0440
        owner: root
        group: root
        setype: sshd_key_t
        content: "{{ ssh_ca_user_pub }}"
      register: ssh_user_ca
      notify: handle_sshd
      when: ssh_ca_user_pub is defined

    - name: known hosts, public SSH host CA
      copy:
        dest: /etc/ssh/known_hosts
        mode: 0444
        owner: root
        group: root
        setype: sshd_key_t
        content: "@cert-authority * {{ ssh_ca_host_pub }}"
      notify: handle_sshd
      when: ssh_ca_host_pub is defined
  when: sshd_certificates is defined and sshd_certificates | bool

- name: sshd config
  template:
    src: sshd.conf
    dest: "/etc/ssh/{{ ansible_facts.os_family | regex_search('Debian') | ternary('sshd.config', 'sshd_config') }}"
    owner: root
    group: root
    mode: '0600'
    setype: etc_t
  notify: handle_sshd
  register: sshd_conf
    #https://github.com/ansible/ansible/issues/19243
    #validate: "/usr/sbin/sshd -c -T %s"

##### END SSH config #####

- name: chrony, NTP time config
  template:
    src: chrony.conf
    dest: /etc/chrony.conf
    owner: root
    group: root
    setype: etc_t
    mode: 0600
  notify: handle_chrony

#- name: 'secondary, concurrent to upgrades redhat distribution specific block'
#  import_tasks: "{{ ansible_facts['os_family'] }}_family.yml"

##### BEGIN Logging #####
- name: rsyslog main configuration file
  template:
    src: rsyslog.conf
    dest: /etc/
    owner: root
    group: root
    mode: '0644'
    setype: syslog_conf_t
    validate: "rsyslogd -N1 -f %s"
  notify: handle_rsyslog

# TODO add logrotate, grub, udev, modprobe, sysctl

##### END Logging #####

- name: clean image template
  block:
    - name: clean logs
      command: "/bin/rm -rf {{ item }}"
      loop:
        - "/var/log/*"
        - "/var/cache/*"
        - "/root/.cache"
        - "/root/.bash_history"
        - "/var/tmp/*"
  when: clean_files is defined

- name: flush handlers while package upgrade takes place
  meta: flush_handlers

- name: 'wait for package upgrade to finish'
  async_status:
    jid: "{{ package_upgrade.ansible_job_id }}"
  register: upgrade_check
  until: upgrade_check.finished
  retries: 90
