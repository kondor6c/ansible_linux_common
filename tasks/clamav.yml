---
- name: clamconf
  command: clamconf
  register: sysconf

- name: clamav has the user and directory options set when clamav is compiled, does not seem ideal
  set_fact:
    clam_dir: "{{ sysconf.stdout |regex_search('(Checking configuration files in )(\\S+)', '\\2', multiline=True ) |first | default('/etc/') }}"
    clam_user: "{{ sysconf.stdout |regex_search('(--with-user=)(\\w+)', '\\2', multiline=True) | first  }}"
    clam_group: "{{ sysconf.stdout |regex_search('(--with-group=)(\\w+)', '\\2', multiline=True ) | first }}"

- name: set for ubuntu because they are not compiling with a user options
  set_fact:
    clam_dir: "/etc/clamav"
    clam_user: "clamav"
    clam_group: "clamav"
  when: ansible_distribution == 'Ubuntu'

- name: move to vars file in new role
  set_fact:
    clamav_local_filesystem_autoscan: /srv/scan
    clam_exclude:
      - '/var/log'
    unit_files:
      - 'clamscan.service'
      - 'clamscan.slice'
      - 'clamscan.timer'
      - 'freshclam.timer'
      - 'freshclam.service'
      - 'clamav_autoscan.service'
      - 'clamav_autoscan.path'

- name: 'systemd slices (cgroup limits), timers, and service units'
  template:
    dest: /etc/systemd/system/
    src: "{{ unit_file }}"
    mode: "0644"
    setype: etc_t
    owner: "root"
    group: "root"
  loop: "{{ unit_files }}"
  loop_control:
    loop_var: unit_file

- name: 'clam config'
  template:
    dest: "{{ clam_dir }}/"
    src: "{{ item }}"
    mode: "0644"
    setype: etc_t
    owner: "{{ clam_user }}"
    group: "{{ clam_group }}"
  loop:
    - "freshclam.conf"
    - "scan.conf"
    - "clamav_services.env"

- name: allow clamav to scan all files
  seboolean:
    name: antivirus_can_scan_system
    state: yes
    persistent: yes

- name: 'enable clam services'
  systemd:
    name: "{{ unit_file }}"
    enabled: yes
  loop: "{{ unit_files }}"
  loop_control:
    loop_var: unit_file
