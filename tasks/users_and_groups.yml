---
#- template:
#    dest: "/etc/sudoers.d/{{ g }}"
#    src:
#    state: present
#    mode: '0400'
#    owner: 'root'
#    group: 'root'
#    validate: '/usr/sbin/visudo -cf %s'
#  loop: "{{ groups }}"
#  loop_control:
#    loop_var: g
- name: 'core sudoers file'
  template:
    src: sudoers.j2
    dest: /etc/sudoers
    owner: root
    group: root
    mode: '0600'
    validate: '/usr/sbin/visudo -cf %s'
    backup: yes
- name: check for user structure and enforce it, we still check individual variables to speed execution times
  assert: 
    that:
      - user_map is defined and user_map | length >= 1 
      - user_groups is defined
      - revoked_users is defined
    fail_msg: "user/group variable structure is not present, it should be, if users are to be added."
    success_msg: "adding users present in user_map"
    
- name: 'modify group membership'
  group:
    name: "{{ g.name }}"
    state: present
    gid: "{{ g.gid }}"
  when: user_groups is defined and user_groups | length >= 1
  loop: "{{ user_groups }}"
  loop_control:
    loop_var: g
  tags:
    - groupadd
- name: add the user
  block:
    - name: 'add users'
      user:
        name: "{{ u.name }}"
        uid: "{{ u.uid }}"
        comment: "{{ u.comment | default('no comment') }}"
        state: present
        groups: "{{ u.primary_group }}"
      loop: "{{ user_map }}"
      when: user_map | length >= 1 
      loop_control:
        loop_var: u
      tags:
        - useradd
    - name: 'auth_key module '
      authorized_key:
        user: "{{ u.0.name }}"
        key: "{{ u.1 }}"
      when: u | length >= 1
      loop: "{{ user_map |subelements('public_keys') }}"
      loop_control:
        loop_var: u
      tags:
        - useradd
        - authorized_keys
  when: user_map is defined and user_map | length >= 1 

- name: revoke specified users
  block:
    - name: if argument is passed, add it
      set_fact:
        revoked_users: "{{ revoked_user | combine(revoked_user: 'purge') }}"
      when: revoke_user is defined
    - name: new kill
      command: "pkill --signal 9 -U {{ u.key }}"
      ignore_errors: true
      loop: "{{ revoked_users |dict2items }}"
      when: u.value != 'soft'
      loop_control:
        loop_var: u
    - name: archive user contents
      command: "tar czf userhome_{{ u.key }}_archive.tar.gz /home/{{ u.key }}"
      when: ( users[u.key]['archive_home'] is defined and users[u.key]['archive_home'] |bool == True) or (u.value == 'archive' )
      loop: "{{ revoked_users |dict2items }}"
      loop_control:
        loop_var: u
    - name: remove user
      user:
        name: "{{ u.key }}"
        remove: yes
        state: absent
      when: (revoked_users is defined) and (revoked_users |length >= 1)
      loop: "{{ revoked_users |dict2items }}"
      loop_control:
        loop_var: u
  when: revoked_users | length >= 1
